# -*- coding: utf-8 -*-
"""house_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11fIoIkk7cUHApCMxPgwfgQDvTarOcYJM

ML INTERN at PRODIGY INFOTECH

Task 1: Implement a linear regression model to predict the prices of houses based on their square footage and the number of bedrooms and bathrooms.

Dataset: https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data

Import Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

"""Load and Explore Data"""

house = pd.DataFrame(pd.read_csv("train.csv"))

house.head()

house.shape

house.info()

house.describe()

house.columns

"""Data cleaning"""

house.isnull().sum()*100/house.shape[0]

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

house_cleaned = house.dropna()

house_cleaned.isnull().sum()*100/house.shape[0]

"""Data visualisation"""

house.hist(bins=50, figsize=(20, 15))
plt.tight_layout()
plt.show()

sns.pairplot(house)

sns.displot(house['SalePrice'])

"""Outlier analysis"""

fig, axs = plt.subplots(2,3, figsize = (10,5))
plt1 = sns.boxplot(house['SalePrice'], ax = axs[0,0])
plt2 = sns.boxplot(house['BedroomAbvGr'], ax = axs[0,1])
plt3 = sns.boxplot(house['LotArea'], ax = axs[0,2])

plt4 = sns.boxplot(house['BsmtFinSF1'], ax = axs[1,0])
plt5 = sns.boxplot(house['BsmtFinSF2'], ax = axs[1,1])
plt6 = sns.boxplot(house['TotalBsmtSF'], ax = axs[1,2])
plt.tight_layout()

fig1, axs = plt.subplots(2,2, figsize = (10,5))
plt7 = sns.boxplot(house['GarageArea'], ax = axs[0,0])
plt8 = sns.boxplot(house['1stFlrSF'], ax = axs[0,1])
plt9 = sns.boxplot(house['2ndFlrSF'], ax = axs[1,0])
plt.tight_layout()

fig2, axs = plt.subplots(2,2, figsize = (10,5))
plt10 = sns.boxplot(house['BsmtFullBath'], ax = axs[0,0])
plt11= sns.boxplot(house['BsmtHalfBath'], ax = axs[0,1])
plt12= sns.boxplot(house['FullBath'], ax = axs[1,0])
plt13= sns.boxplot(house['HalfBath'], ax = axs[1,1])
plt.tight_layout()

plt.boxplot(house.SalePrice)
Q1 = house.SalePrice.quantile(0.25)
Q3 = house.SalePrice.quantile(0.75)
IQR = Q3 - Q1
house = house[(house.SalePrice >= Q1 - 1.5*IQR) & (house.SalePrice <= Q3 + 1.5*IQR)]

plt.boxplot(house.LotArea)
Q1 = house.LotArea.quantile(0.25)
Q3 = house.LotArea.quantile(0.75)
IQR = Q3 - Q1
house = house[(house.LotArea >= Q1 - 1.5*IQR) & (house.LotArea <= Q3 + 1.5*IQR)]

plt.boxplot(house.BsmtFinSF1)
Q1 = house.BsmtFinSF1.quantile(0.25)
Q3 = house.BsmtFinSF1.quantile(0.75)
IQR = Q3 - Q1
house = house[(house.BsmtFinSF1 >= Q1 - 1.5*IQR) & (house.BsmtFinSF1 <= Q3 + 1.5*IQR)]

plt.boxplot(house.BsmtFinSF2)
Q1 = house.BsmtFinSF2.quantile(0.25)
Q3 = house.BsmtFinSF2.quantile(0.75)
IQR = Q3 - Q1
house = house[(house.BsmtFinSF2 >= Q1 - 1.5*IQR) & (house.BsmtFinSF2 <= Q3 + 1.5*IQR)]

plt.boxplot(house.TotalBsmtSF)
Q1 = house.TotalBsmtSF.quantile(0.25)
Q3 = house.TotalBsmtSF.quantile(0.75)
IQR = Q3 - Q1
house = house[(house.TotalBsmtSF >= Q1 - 1.5*IQR) & (house.TotalBsmtSF <= Q3 + 1.5*IQR)]

plt.boxplot(house.GarageArea)
Q1 = house.GarageArea.quantile(0.25)
Q3 = house.GarageArea.quantile(0.75)
IQR = Q3 - Q1
house = house[(house.GarageArea >= Q1 - 1.5*IQR) & (house.GarageArea <= Q3 + 1.5*IQR)]

plt.boxplot(house['1stFlrSF'])
Q1 = house['1stFlrSF'].quantile(0.25)
Q3 = house['1stFlrSF'].quantile(0.75)
Q1 = house['1stFlrSF'].quantile(0.25)
IQR = Q3 - Q1
house = house[(house['1stFlrSF'] >= Q1 - 1.5*IQR) & (house['1stFlrSF'] <= Q3 + 1.5*IQR)]

fig3, axs = plt.subplots(2,3, figsize = (10,5))
plt1 = sns.boxplot(house['SalePrice'], ax = axs[0,0])
plt2 = sns.boxplot(house['1stFlrSF'], ax = axs[0,1])
plt3 = sns.boxplot(house['LotArea'], ax = axs[0,2])

plt4 = sns.boxplot(house['BsmtFinSF1'], ax = axs[1,0])
plt5 = sns.boxplot(house['TotalBsmtSF'], ax = axs[1,1])
plt6 = sns.boxplot(house['GarageArea'], ax = axs[1,2])
plt.tight_layout()

"""Feature Selection and Data Preparation"""

#Input feature
x = house[['BedroomAbvGr', 'LotArea', 'BsmtFinSF1','BsmtFinSF2', 'TotalBsmtSF','GarageArea','1stFlrSF','2ndFlrSF','BsmtFullBath','FullBath','BsmtHalfBath','HalfBath']]
#Output feature
y = house['SalePrice']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=100)

"""Training a Linear Regression model"""

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(x_train,y_train)

print(lm.intercept_)

coeff_df = pd.DataFrame(lm.coef_,x.columns,columns=['Coefficient'])
coeff_df

# prompt: Using dataframe coeff_df: histogram

import altair as alt
chart = alt.Chart(coeff_df).mark_bar().encode(x='Coefficient:Q').properties(width=600)
chart

"""Predictions"""

predictions = lm.predict(x_test)
plt.scatter(y_test,predictions)

sns.displot((y_test-predictions),bins=50);

"""Evaluation metrices"""

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))